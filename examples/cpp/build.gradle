import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2022.0.0"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(RoboRIO) {
            team = project.frc.getTeamNumber()
            debug = true

            frcNativeArtifact('frcCpp') {
            }
        }
        // frc {
        //     roboRIO("roborio") {
        //         // Team number is loaded either from the .wpilib/wpilib_preferences.json
        //         // or from command line. If not found an exception will be thrown.
        //         // You can use getTeamOrDefault(team) instead of getTeamNumber if you
        //         // want to store a team number in this file.
        //         team = project.frc.getTeamNumber()
        //     }
        // }
    }
    // artifacts {
    //     frc {
    //         frcNativeArtifact('frcCpp') {
    //             target = "roborio"
    //             component = 'frcUserProgram'
    //             // Debug can be overridden by command line, for use with VSCode
    //             debug = project.frc.getDebugOrDefault(false)
    //         }
    //     }
        // // Built in artifact to deploy arbitrary files to the roboRIO.
        // fileTreeArtifact('frcStaticFileDeploy') {
        //     // The directory below is the local directory to deploy
        //     files = fileTree(dir: 'src/main/deploy')
        //     // Deploy to RoboRIO target, into /home/lvuser/deploy
        //     targets << "roborio"
        //     directory = '/home/lvuser/deploy'
        // }
    //}
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// dependencies {
//     // In C++ for now, the argument must be true
//     simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
//     simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, true)

//     // Websocket extensions require additional configuration.
//     // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, true)
//     // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, true)
// }

// // Simulation configuration (e.g. environment variables).
// sim {
//     // Sets the websocket client remote host.
//     // envVar "HALSIMWS_HOST", "10.0.0.2"
// }

wpi.nativebuild.debugSimulation = false

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            deployArtifact.component = it
            wpi.nativebuild.enableExternalTasks(it)

            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.nativebuild.vendor.cpp(it)
            wpi.nativebuild.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            wpi.nativebuild.enableExternalTasks(it)

            wpi.nativebuild.vendor.cpp(it)
            wpi.nativebuild.deps.wpilib(it)
            wpi.nativebuild.deps.googleTest(it)
        }
    }
}

wrapper {
    gradleVersion = '7.1.1'
    distributionType = Wrapper.DistributionType.BIN
}
